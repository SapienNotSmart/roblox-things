local TeleportService = game:GetService("TeleportService")

-- Hook na função Teleport para evitar que o jogo force um rejoin
local oldTeleport; oldTeleport = hookfunction(TeleportService.Teleport, function(...)
    warn("Blyadddd")
    return -- Cancela a execução da função
end)

-- Hook na função TeleportToPlaceInstance
local oldTeleportInstance; oldTeleportInstance = hookfunction(TeleportService.TeleportToPlaceInstance, function(...)
    warn("Kurwaaaa")
    return -- Cancela a execução da função
end)

print("Rejoin protection enabled")

local library = loadstring(game.HttpGet(game, "https://raw.githubusercontent.com/bloodball/-back-ups-for-libs/main/0x"))() -- aonde a library vai ficar armazenada

local w1 = library:Window("a") -- Text

local Players = game:GetService("Players")
local Workspace = game:GetService("Workspace")
local player = Players.LocalPlayer
local char = player.Character or player.CharacterAdded:Wait()
local hrp = char:WaitForChild("HumanoidRootPart")

local waitPos = Vector3.new(30, 31, -1499)
local sakuraFarmRunning = false
local kaijuFarmRunning = false
local farmEnabled = false
local inGameSince = 0

-- Proteção contra void
local function isSafe(pos)
	local rayOrigin = pos + Vector3.new(0, 5, 0)
	local rayDirection = Vector3.new(0, -100, 0)
	local raycastParams = RaycastParams.new()
	raycastParams.FilterDescendantsInstances = {char}
	raycastParams.FilterType = Enum.RaycastFilterType.Blacklist
	local result = Workspace:Raycast(rayOrigin, rayDirection, raycastParams)
	return result ~= nil
end

-- Parse Timer
local function parseTimer(text)
	if not text then return math.huge end

	local mm, ss = text:match("(%d+):(%d+)")
	if mm and ss then
		return tonumber(mm) * 60 + tonumber(ss)
	end

	return math.huge
end

-- Detecta minigame ativo
local function isSakuraActive()
	return Workspace:FindFirstChild("Interiors")
		and Workspace.Interiors:FindFirstChild("BlossomShakedownInterior")
		and Workspace.Interiors.BlossomShakedownInterior:FindFirstChild("RingPickups")
end

local function isKaijuActive()
	if not Workspace:FindFirstChild("Interiors") then return false end
	for _, v in ipairs(Workspace.Interiors:GetChildren()) do
		if v.Name:match("^KaijuStompMinigame::") then
			return true
		end
	end
	return false
end

-- Autofarm Sakura
local function startSakuraFarm()
    if sakuraFarmRunning then return end
    sakuraFarmRunning = true
    
    local firstPos = Vector3.new(-2968, 5502, 11817)
    local secondPos = Vector3.new(-3041, 5529, 11928)
    local collected = 0
    local maxModels = 40
    local collectedModels = {}
    
    -- Teleporta para a área e espera
    hrp.CFrame = CFrame.new(firstPos)
    task.wait(1)
    hrp.CFrame = CFrame.new(secondPos)
    task.wait(0.5)
    
    -- Congela o jogador
    local freeze = Instance.new("BodyPosition")
    freeze.Name = "Freeze"
    freeze.MaxForce = Vector3.new(1e6, 1e6, 1e6)
    freeze.Position = hrp.Position
    freeze.P = 1e5
    freeze.D = 1e4
    freeze.Parent = hrp
    
    local startTime = os.time()
    local maxWaitTime = 60 -- Tempo máximo em segundos para tentar coletar
    
    while isSakuraActive() and collected < maxModels and (os.time() - startTime) < maxWaitTime do
        local folder = Workspace.Interiors.BlossomShakedownInterior:FindFirstChild("RingPickups")
        
        if folder then
            local models = folder:GetChildren()
            local foundNew = false
            
            for _, model in ipairs(models) do
                if model:IsA("Model") and model.Name == "Model" and not collectedModels[model] then
                    local part = model.PrimaryPart or model:FindFirstChildWhichIsA("BasePart")
                    
                    if part then
                        if collected >= maxModels then
                            break
                        end
                        
                        model:SetPrimaryPartCFrame(hrp.CFrame)
                        collectedModels[model] = true
                        collected = collected + 1
                        foundNew = true
                        print("Sakura: " .. collected .. "/" .. maxModels)
                        task.wait(0.3)
                    end
                end
            end
            
            -- Se não encontramos nenhum novo modelo e ainda não coletamos o suficiente
            if not foundNew and collected < maxModels then
                -- Espera um pouco mais para ver se novos modelos aparecem
                task.wait(1)
            end
        else
            task.wait(1) -- Espera caso a pasta não seja encontrada
        end
    end
    
    print("Coleta finalizada: " .. collected .. " modelos coletados de " .. maxModels .. " desejados")
    
    -- Libera o personagem e volta para posição de espera
    freeze:Destroy()
    hrp.CFrame = CFrame.new(waitPos)
    sakuraFarmRunning = false
end


-- Autofarm Kaiju
local function startKaijuFarm()
	if kaijuFarmRunning then return end
	kaijuFarmRunning = true

	while isKaijuActive() do
		for _, v in ipairs(Workspace:GetDescendants()) do
			if v:IsA("Model") and v.Name == "Tree1" then
				local cf = v:GetModelCFrame()
				local pos = cf.Position
				if isSafe(pos) then
					hrp.CFrame = cf + Vector3.new(0, 3, 0)
					task.wait(0.25)
				end
			end
		end
		task.wait(0.5)
	end

	hrp.CFrame = CFrame.new(waitPos)
	kaijuFarmRunning = false
end

-- Loop principal
task.spawn(function()
	while true do
		if not farmEnabled then task.wait(1) continue end

		local interiors = Workspace:FindFirstChild("Interiors")
		local mainMap = interiors and interiors:FindFirstChild("MainMap!Default")

		local sakuraTime = math.huge
		local kaijuTime = math.huge

		if mainMap then
			local sakuraLabel = mainMap:FindFirstChild("BlossomShakedownJoinZone")
			if sakuraLabel and sakuraLabel:FindFirstChild("Billboard") then
				local label = sakuraLabel.Billboard:FindFirstChild("BillboardGui")
				if label and label:FindFirstChild("TimerLabel") then
					sakuraTime = parseTimer(label.TimerLabel.Text or label.TimerLabel.ContentText)
				end
			end

			local kaijuLabel = mainMap:FindFirstChild("TearUpToykyoJoinZone")
			if kaijuLabel and kaijuLabel:FindFirstChild("Billboard") then
				local label = kaijuLabel.Billboard:FindFirstChild("BillboardGui")
				if label and label:FindFirstChild("TimerLabel") then
					kaijuTime = parseTimer(label.TimerLabel.Text or label.TimerLabel.ContentText)
				end
			end
		end

		if isSakuraActive() then
			inGameSince = os.clock()
			startSakuraFarm()
		elseif isKaijuActive() then
			inGameSince = os.clock()
			startKaijuFarm()
		elseif sakuraTime <= 35 or kaijuTime <= 35 then
			if os.clock() - inGameSince > 10 then
				if sakuraTime < kaijuTime then
					local pos = mainMap.BlossomShakedownJoinZone.Collider.Position + Vector3.new(0, 3, 0)
					if isSafe(pos) then
						hrp.CFrame = CFrame.new(pos)
					end
				else
					local pos = mainMap.TearUpToykyoJoinZone.Collider.Position + Vector3.new(0, 3, 0)
					if isSafe(pos) then
						hrp.CFrame = CFrame.new(pos)
					end
				end
			end
		else
			if os.clock() - inGameSince > 10 then
				if (hrp.Position - waitPos).Magnitude > 5 then
					hrp.CFrame = CFrame.new(waitPos)
				end
			end
		end

		task.wait(1)
	end
end)

-- Toggle
w1:Toggle(
	"Farm Both Minigames",
	"frz",
	false,
	function(toggled)
		farmEnabled = toggled
	end
)

w1:Button(
    "Anti-AFK",
    function()
local VirtualUser = game:GetService('VirtualUser')

game:GetService('Players').LocalPlayer.Idled:Connect(function()
    VirtualUser:CaptureController()
    VirtualUser:ClickButton2(Vector2.new())
end)

game:GetService("StarterGui"):SetCore("SendNotification", {
    Title = "AntiAFK loaded!",
    Text = "Enjoy!",
    Button1 = "OK",
    Duration = 5
})
end
)

w1:Button(
    "Destroy GUI",
    function()
        for i, v in pairs(game.CoreGui:GetChildren()) do
            if v:FindFirstChild("Top") then
                v:Destroy()
            end
        end
    end
) -- Text, Callback

w1:Label("blyad") -- Text
