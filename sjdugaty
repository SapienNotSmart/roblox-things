local TeleportService = game:GetService("TeleportService")

-- Hook na função Teleport para evitar que o jogo force um rejoin
local oldTeleport; oldTeleport = hookfunction(TeleportService.Teleport, function(...)
    warn("Blyadddd")
    return -- Cancela a execução da função
end)

-- Hook na função TeleportToPlaceInstance
local oldTeleportInstance; oldTeleportInstance = hookfunction(TeleportService.TeleportToPlaceInstance, function(...)
    warn("Kurwaaaa")
    return -- Cancela a execução da função
end)

print("Rejoin protection enabled. God bless you!")

local library = loadstring(game.HttpGet(game, "https://raw.githubusercontent.com/bloodball/-back-ups-for-libs/main/0x"))() -- aonde a library vai ficar armazenada

local w1 = library:Window("Cherry Blossom Festival") -- Text

local Players = game:GetService("Players")
local Workspace = game:GetService("Workspace")
local player = Players.LocalPlayer
local char = player.Character or player.CharacterAdded:Wait()
local hrp = char:WaitForChild("HumanoidRootPart")

local waitPos = Vector3.new(108, 38, -1351)
local sakuraFarmRunning = false
local kaijuFarmRunning = false
local farmEnabled = false
local inGameSince = 0

-- Proteção contra void
local function isSafe(pos)
	local rayOrigin = pos + Vector3.new(0, 5, 0)
	local rayDirection = Vector3.new(0, -100, 0)
	local raycastParams = RaycastParams.new()
	raycastParams.FilterDescendantsInstances = {char}
	raycastParams.FilterType = Enum.RaycastFilterType.Blacklist
	local result = Workspace:Raycast(rayOrigin, rayDirection, raycastParams)
	return result ~= nil
end

-- Parse Timer
local function parseTimer(text)
	if not text then return math.huge end

	local mm, ss = text:match("(%d+):(%d+)")
	if mm and ss then
		return tonumber(mm) * 60 + tonumber(ss)
	end

	return math.huge
end

-- Detecta minigame ativo
local function isSakuraActive()
	return Workspace:FindFirstChild("Interiors")
		and Workspace.Interiors:FindFirstChild("BlossomShakedownInterior")
		and Workspace.Interiors.BlossomShakedownInterior:FindFirstChild("RingPickups")
end

local function isKaijuActive()
	if not Workspace:FindFirstChild("Interiors") then return false end
	for _, v in ipairs(Workspace.Interiors:GetChildren()) do
		if v.Name:match("^KaijuStompMinigame::") then
			return true
		end
	end
	return false
end

-- Autofarm Sakura
local function startSakuraFarm()
    if sakuraFarmRunning then return end
    sakuraFarmRunning = true
    
    local firstPos = Vector3.new(-2968, 5502, 11817)
    local secondPos = Vector3.new(-3041, 5529, 11928)
    local collected = 0
    local maxModels = 40
    local collectedModels = {}
    
    -- Teleporta para a área e espera
    hrp.CFrame = CFrame.new(firstPos)
    task.wait(3)
    hrp.CFrame = CFrame.new(secondPos)
    task.wait(0.5)
    
    -- Congela o jogador
    local freeze = Instance.new("BodyPosition")
    freeze.Name = "Freeze"
    freeze.MaxForce = Vector3.new(1e6, 1e6, 1e6)
    freeze.Position = hrp.Position
    freeze.P = 1e5
    freeze.D = 1e4
    freeze.Parent = hrp
    
    local startTime = os.time()
    local maxWaitTime = 60 -- Tempo máximo em segundos para tentar coletar
    
    while isSakuraActive() and collected < maxModels and (os.time() - startTime) < maxWaitTime do
        local folder = Workspace.Interiors.BlossomShakedownInterior:FindFirstChild("RingPickups")
        
        if folder then
            local models = folder:GetChildren()
            local foundNew = false
            
            for _, model in ipairs(models) do
                if model:IsA("Model") and model.Name == "Model" and not collectedModels[model] then
                    local part = model.PrimaryPart or model:FindFirstChildWhichIsA("BasePart")
                    
                    if part then
                        if collected >= maxModels then
                            break
                        end
                        
                        model:SetPrimaryPartCFrame(hrp.CFrame)
                        collectedModels[model] = true
                        collected = collected + 1
                        foundNew = true
                        print("Sakura: " .. collected .. "/" .. maxModels)
                        task.wait(0.3)
                    end
                end
            end
            
            -- Se não encontramos nenhum novo modelo e ainda não coletamos o suficiente
            if not foundNew and collected < maxModels then
                -- Espera um pouco mais para ver se novos modelos aparecem
                task.wait(1)
            end
        else
            task.wait(1) -- Espera caso a pasta não seja encontrada
        end
    end
    
    print("Coleta finalizada: " .. collected .. " modelos coletados de " .. maxModels .. " desejados")
    
    -- Libera o personagem e volta para posição de espera
    freeze:Destroy()
    hrp.CFrame = CFrame.new(waitPos)
    sakuraFarmRunning = false
end

-- Autofarm Kaiju
local function startKaijuFarm()
    if kaijuFarmRunning then return end
    kaijuFarmRunning = true

    local startTime = os.clock()
    local visited = {}

    local highValueModels = {
        BuildingD3 = true,
        BuildingD2 = true,
        BuildingC = true,
        -- pode adicionar mais aqui depois
    }

    local lowValueModels = {
        Tree1 = true,
        Blossom1 = true,
        Blossom2 = true,
        Blossom3 = true,
        Blossom4 = true,
        BuildingA = true,
    }

    while isKaijuActive() do
        local elapsed = os.clock() - startTime
        local useHighPriority = elapsed >= 60

        for _, v in ipairs(Workspace:GetDescendants()) do
            if v:IsA("Model") and v.PrimaryPart then
                local modelName = v.Name

                if not visited[v:GetDebugId()] then
                    local shouldCollect = false

                    if useHighPriority and highValueModels[modelName] then
                        shouldCollect = true
                    elseif not useHighPriority and (highValueModels[modelName] or lowValueModels[modelName]) then
                        shouldCollect = true
                    end

                    if shouldCollect then
                        local cf = v:GetModelCFrame()
                        local pos = cf.Position
                        if isSafe(pos) then
                            visited[v:GetDebugId()] = true
                            hrp.CFrame = cf + Vector3.new(0, 3, 0)
                            task.wait(0.2)
                        end
                    end
                end
            end
        end

        task.wait(0.2)
    end

    hrp.CFrame = CFrame.new(waitPos)
    kaijuFarmRunning = false
end

-- Loop principal
task.spawn(function()
	while true do
		if not farmEnabled then task.wait(1) continue end

		local interiors = Workspace:FindFirstChild("Interiors")
		local mainMap = interiors and interiors:FindFirstChild("MainMap!Default")

		local sakuraTime = math.huge
		local kaijuTime = math.huge

		if mainMap then
			local sakuraLabel = mainMap:FindFirstChild("BlossomShakedownJoinZone")
			if sakuraLabel and sakuraLabel:FindFirstChild("Billboard") then
				local label = sakuraLabel.Billboard:FindFirstChild("BillboardGui")
				if label and label:FindFirstChild("TimerLabel") then
					sakuraTime = parseTimer(label.TimerLabel.Text or label.TimerLabel.ContentText)
				end
			end

			local kaijuLabel = mainMap:FindFirstChild("TearUpToykyoJoinZone")
			if kaijuLabel and kaijuLabel:FindFirstChild("Billboard") then
				local label = kaijuLabel.Billboard:FindFirstChild("BillboardGui")
				if label and label:FindFirstChild("TimerLabel") then
					kaijuTime = parseTimer(label.TimerLabel.Text or label.TimerLabel.ContentText)
				end
			end
		end

		if isSakuraActive() then
			inGameSince = os.clock()
			startSakuraFarm()
		elseif isKaijuActive() then
			inGameSince = os.clock()
			startKaijuFarm()
		elseif sakuraTime <= 35 or kaijuTime <= 35 then
			if os.clock() - inGameSince > 10 then
				if sakuraTime < kaijuTime then
					local pos = mainMap.BlossomShakedownJoinZone.Collider.Position + Vector3.new(0, 3, 0)
					if isSafe(pos) then
						hrp.CFrame = CFrame.new(pos)
					end
				else
					local pos = mainMap.TearUpToykyoJoinZone.Collider.Position + Vector3.new(0, 3, 0)
					if isSafe(pos) then
						hrp.CFrame = CFrame.new(pos)
					end
				end
			end
		else
			if os.clock() - inGameSince > 10 then
				if (hrp.Position - waitPos).Magnitude > 5 then
					hrp.CFrame = CFrame.new(waitPos)
				end
			end
		end

		task.wait(1)
	end
end)

-- Toggle
w1:Toggle(
	"Farm Both Minigames",
	"frz",
	false,
	function(toggled)
		farmEnabled = toggled
	end
)

local Players = game:GetService("Players")
local player = Players.LocalPlayer

local function getRoot()
	local char = player.Character or player.CharacterAdded:Wait()
	return char:FindFirstChild("HumanoidRootPart")
end

local collectingEggs = false

w1:Toggle(
    "Auto Collect Eggs", 
    "frz",
    false,
    function(toggled)
        game:GetService("StarterGui"):SetCore("SendNotification", {
            Title = "Tell me if you find any bugs in this function",
            Text = "heheheha",
            Button1 = "OK",
            Duration = 5
        })

        collectingEggs = toggled
        task.wait(3)

        if toggled then
            task.spawn(function()
                while collectingEggs do
                    pcall(function()
                        local eggBin = workspace:FindFirstChild("Interiors")
                            and workspace.Interiors:FindFirstChild("MainMap!Default")
                            and workspace.Interiors["MainMap!Default"]:FindFirstChild("Event")
                            and workspace.Interiors["MainMap!Default"].Event:FindFirstChild("EggHuntEggBin")

                        if eggBin and eggBin:IsA("Folder") then
                            local root = getRoot()
                            if root then
                                for _, obj in pairs(eggBin:GetChildren()) do
                                    if obj:IsA("Model") and obj.PrimaryPart then
                                        obj:SetPrimaryPartCFrame(
                                            root.CFrame + Vector3.new(math.random(-3, 3), 0, math.random(-3, 3))
                                        )
                                    elseif obj:IsA("BasePart") then
                                        obj.CFrame = root.CFrame + Vector3.new(math.random(-3, 3), 0, math.random(-3, 3))
                                    end
                                end
                            end
                        end
                    end)
                    task.wait(0.25)
                end
            end)
        end
    end
)

w1:Button(
    "Anti-AFK",
    function()
local VirtualUser = game:GetService('VirtualUser')

game:GetService('Players').LocalPlayer.Idled:Connect(function()
    VirtualUser:CaptureController()
    VirtualUser:ClickButton2(Vector2.new())
end)

game:GetService("StarterGui"):SetCore("SendNotification", {
    Title = "AntiAFK loaded!",
    Text = "Enjoy!",
    Button1 = "OK",
    Duration = 5
})
end
)

w1:Button(
    "Open Auto Buy Panel",
    function()
        local executor = identifyexecutor and identifyexecutor() or "Desconhecido"

        if executor == "Xeno" then
            game:GetService("StarterGui"):SetCore("SendNotification", {
                Title = "Xeno doesn't support",
                Text = "heheheha",
                Button1 = "OK",
                Duration = 5
            })
        else
            local router

            for i, v in next, getgc(true) do
                if type(v) == 'table' and rawget(v, 'get_remote_from_cache') then
                    router = v
                end
            end
            
            local function rename(remotename, hashedremote)
                hashedremote.Name = remotename
            end
            -- Apply renaming to upvalues of the RouterClient.init function
            table.foreach(debug.getupvalue(router.get_remote_from_cache, 1), rename)

            -- Referências
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local Players = game:GetService("Players")
local Player = Players.LocalPlayer

local ShopRemote = ReplicatedStorage:WaitForChild("API"):WaitForChild("ShopAPI/BuyItem")
local LootBoxRemote = ReplicatedStorage:WaitForChild("API"):WaitForChild("LootBoxAPI/ExchangeItemForReward")

-- UI Principal
local screenGui = Instance.new("ScreenGui", Player:WaitForChild("PlayerGui"))
screenGui.Name = "AutoBuyUI"
screenGui.ResetOnSpawn = false

local mainFrame = Instance.new("Frame", screenGui)
mainFrame.Size = UDim2.new(0, 250, 0, 300)
mainFrame.Position = UDim2.new(0.5, -125, 0.5, -150) -- centralizado
mainFrame.BackgroundColor3 = Color3.fromRGB(30, 30, 30)
mainFrame.BorderSizePixel = 0
mainFrame.Active = true
mainFrame.Draggable = true

local uiCorner = Instance.new("UICorner", mainFrame)
uiCorner.CornerRadius = UDim.new(0, 8)

local closeBtn = Instance.new("TextButton", mainFrame)
closeBtn.Size = UDim2.new(0, 25, 0, 25)
closeBtn.Position = UDim2.new(1, -30, 0, 5)
closeBtn.Text = "X"
closeBtn.TextColor3 = Color3.new(1, 1, 1)
closeBtn.BackgroundColor3 = Color3.fromRGB(180, 50, 50)
closeBtn.BorderSizePixel = 0
Instance.new("UICorner", closeBtn).CornerRadius = UDim.new(0, 4)
closeBtn.MouseButton1Click:Connect(function()
	screenGui:Destroy()
end)

-- Estados
local states = {
    Kaijunior = false,
    Capsule = false,
    Bakeneko = false,
    KageCrow = false,
    Kappakid = false,
    SuperSaru = false
}

-- Função para criar toggles
local function createToggle(name, yOffset, callback)
	local toggle = Instance.new("TextButton", mainFrame)
	toggle.Size = UDim2.new(1, -20, 0, 30)
	toggle.Position = UDim2.new(0, 10, 0, yOffset)
	toggle.Text = "[ OFF ] " .. name
	toggle.TextColor3 = Color3.new(1, 1, 1)
	toggle.BackgroundColor3 = Color3.fromRGB(50, 50, 50)
	toggle.BorderSizePixel = 0
	Instance.new("UICorner", toggle).CornerRadius = UDim.new(0, 4)

	local toggled = false
	toggle.MouseButton1Click:Connect(function()
		toggled = not toggled
		toggle.Text = (toggled and "[ ON  ] " or "[ OFF ] ") .. name
		callback(toggled)
	end)
end

-- Toggles com lógica de compra
createToggle("Kaijunior Box", 40, function(state)
	states.Kaijunior = state
	task.spawn(function()
		while states.Kaijunior do
			ShopRemote:InvokeServer("gifts", "spring_2025_kaijunior_box", { buy_count = 1 })
			task.wait(1)
		end
	end)
end)

createToggle("Capsule", 75, function(state)
	states.Capsule = state
	task.spawn(function()
		while states.Capsule do
			LootBoxRemote:InvokeServer("spring_2025_gacha_machine")
			task.wait(3)
		end
	end)
end)

createToggle("Bakeneko", 110, function(state)
	states.Bakeneko = state
	task.spawn(function()
		while states.Bakeneko do
			ShopRemote:InvokeServer("pets", "spring_2025_bakeneko", { buy_count = 1 })
			task.wait(1)
		end
	end)
end)

createToggle("Kage Crow", 145, function(state)
	states.KageCrow = state
	task.spawn(function()
		while states.KageCrow do
			ShopRemote:InvokeServer("pets", "spring_2025_kage_crow", { buy_count = 1 })
			task.wait(1)
		end
	end)
end)

createToggle("Kappakid", 180, function(state)
	states.Kappakid = state
	task.spawn(function()
		while states.Kappakid do
			ShopRemote:InvokeServer("pets", "spring_2025_kappakid", { buy_count = 1 })
			task.wait(1)
		end
	end)
end)

createToggle("Super Saru", 215, function(state)
	states.SuperSaru = state
	task.spawn(function()
		while states.SuperSaru do
			ShopRemote:InvokeServer("pets", "spring_2025_super_saru", { buy_count = 1 })
			task.wait(1)
		end
	end)
end)
        end
    end
)

w1:Label("YT: PabloScripts21") -- Text

w1:Button(
    "Insane FPS Booster",
    function()
        game:GetService("StarterGui"):SetCore("SendNotification", {
            Title = "God is good",
            Text = "Cannot be disabled",
            Button1 = "I love Jesus",
            Duration = 5
        })
        loadstring(game:HttpGet('https://raw.githubusercontent.com/SapienNotSmart/roblox-insane-fps-booster/refs/heads/main/fps%20booster%20script'))()
    end
)

w1:Button(
    "Destroy GUI",
    function()
        for i, v in pairs(game.CoreGui:GetChildren()) do
            if v:FindFirstChild("Top") then
                v:Destroy()
            end
        end
    end
) -- Text, Callback
